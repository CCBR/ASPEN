from os.path import join

include: join("rules/init.smk")
include: join("rules/align.smk")
include: join("rules/qc.smk")
include: join("rules/peakcall.smk")
include: join("rules/diffatac.smk")
#localrules: all
rule all:
    input:
        #trim
        expand(join(RESULTSDIR,"tmp","trim","{replicate}.R1.trim.fastq.gz"),replicate=REPLICATES),
        #removeBL
        expand(join(RESULTSDIR,"tmp","trim","{replicate}.R1.noBL.fastq.gz"),replicate=REPLICATES),
        #align
        expand(join(RESULTSDIR,"tagAlign","{replicate}.tagAlign.gz"),replicate=REPLICATES),
        expand(join(RESULTSDIR,"dedupBam","{replicate}.dedup.bam"),replicate=REPLICATES),
        expand(join(RESULTSDIR,"qsortedBam","{replicate}.qsorted.bam"),replicate=REPLICATES),
        expand(join(QCDIR,"{replicate}.bowtie2.bam.flagstat"),replicate=REPLICATES),
        expand(join(QCDIR,"{replicate}.dedup.bam.flagstat"),replicate=REPLICATES),
        expand(join(QCDIR,"{replicate}.filt.bam.flagstat"),replicate=REPLICATES),
        expand(join(QCDIR,"{replicate}.dupmetric"),replicate=REPLICATES),
        expand(join(QCDIR,"preseq","{replicate}.nrf"),replicate=REPLICATES),

        #nreads stats
        expand(join(QCDIR,"{replicate}.nreads.txt"),replicate=REPLICATES),
        #fastqc
        expand(join(QCDIR,"fastqc","{replicate}.R1_fastqc.zip"), replicate=REPLICATES),
        expand(join(QCDIR,"fastqc","{replicate}.R2_fastqc.zip"), replicate=REPLICATES),
        expand(join(QCDIR,"fastqc","{replicate}.R1.noBL_fastqc.zip"), replicate=REPLICATES),
        expand(join(QCDIR,"fastqc","{replicate}.R2.noBL_fastqc.zip"), replicate=REPLICATES),
        #fastqscreen
        expand(join(QCDIR,"FQscreen","{replicate}.R1.noBL_screen.txt"), replicate=REPLICATES),
        expand(join(QCDIR,"FQscreen","{replicate}.R1.noBL_screen.png"), replicate=REPLICATES),
        expand(join(QCDIR,"FQscreen","{replicate}.R2.noBL_screen.txt"), replicate=REPLICATES),
        expand(join(QCDIR,"FQscreen","{replicate}.R2.noBL_screen.png"), replicate=REPLICATES),
        # #tss
        expand(join(QCDIR,"tss","{replicate}.tss.txt"),replicate=REPLICATES),
        # #fld
        expand(join(QCDIR,"fld","{replicate}.fld.txt"),replicate=REPLICATES),
        #motif enrichment
        expand(join(QCDIR,"{sample}.motif_enrichment"),sample=SAMPLES),
        #frip
        expand(join(QCDIR,"frip","{sample}.frip"),sample=SAMPLES),
        #multiqc
        join(QCDIR,"multiqc_report.html"),
        join(QCDIR,"QCStats.tsv"),
        #macs2 peaks
        expand(join(RESULTSDIR,"peaks","macs2","{sample}.consensus.macs2.peakfiles"),sample=SAMPLES),
        expand(join(RESULTSDIR,"peaks","macs2","{sample}.replicate.macs2.peakfiles"),sample=SAMPLES),
        expand(join(RESULTSDIR,"peaks","macs2","{sample}.macs2.tn5nicksbedfiles"),sample=SAMPLES),
        #genrich peaks
        expand(join(RESULTSDIR,"peaks","genrich","{sample}.consensus.genrich.peakfiles"),sample=SAMPLES),
        expand(join(RESULTSDIR,"peaks","genrich","{sample}.replicate.genrich.peakfiles"),sample=SAMPLES),
        expand(join(RESULTSDIR,"peaks","genrich","{sample}.genrich.tn5nicksbedfiles"),sample=SAMPLES),
        # roi gtf 
        expand(join(RESULTSDIR,"peaks","{peakcaller}","fixed_width","ROI.gtf"),peakcaller=PEAKCALLERS),
        # counts matrix
        expand(join(RESULTSDIR,"peaks","{peakcaller}","ROI.counts.tsv"),peakcaller=PEAKCALLERS),
        # diffatac
        expand(join(RESULTSDIR, "peaks", "{peakcaller}", "DiffATAC", "all_diff_atacs.tsv"),peakcaller=PEAKCALLERS) if CONTRASTS.shape[0] > 0 else [],


# create jobby tables
jobby_cmd = 'run_jobby_on_snakemake_log snakemake.log | tee logs/snakemake.log.jobby | cut -f2,3,18 > logs/snakemake.log.jobby.short'
spook_cmd = f'spooker {WORKDIR} ASPEN'

onsuccess:
    #subprocess.run(shlex.split(jobby_cmd),capture_output=False,shell=False,text=True)
    print("OnSuccess")
    shell("printenv")
    shell("module list")
    print(jobby_cmd)
    print("The above command may fail if run_jobby_on_snakemake_log is not in PATH!")
    shell(jobby_cmd)
    print(spook_cmd)
    shell(spook_cmd)
    print("The above command may fail if spooker is not in PATH or not running on BIOWULF/FRCE!")

onerror:
    #subprocess.run(shlex.split(jobby_cmd),capture_output=False,shell=False,text=True)
    print("OnError")
    shell("printenv")
    shell("module list")
    print(jobby_cmd)
    shell(jobby_cmd)
    print("The above command may fail if run_jobby_on_snakemake_log is not in PATH!")
    print(spook_cmd)
    shell(spook_cmd)
    print("The above command may fail if spooker is not in PATH or not running on BIOWULF/FRCE!")
